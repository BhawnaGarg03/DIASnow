<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_ind_tmt_orm.LIAMAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>LIAMAPI</name>
        <script><![CDATA[var LIAMAPI = Class.create();
LIAMAPI.prototype = {
    getUserLIAM: function(contact, userName) {
        var createUser = '';
        gs.info("**********LIAM username*******" + userName);
        var LIAMToken = this.getLIAMToken();
        try {
            var r = new sn_ws.RESTMessageV2('LIAMToken', 'getUserDetails');
            r.setRequestHeader('Authorization', 'Bearer ' + LIAMToken);
            r.setRequestHeader('Accept', 'application/json');
            r.setStringParameterNoEscape('userName', userName);
            var response = r.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            var parseJSONResponse = JSON.parse(responseBody + '');
            gs.info("*******LIAM parseResponseBody*****" + parseJSONResponse);
            var userDetails = parseJSONResponse.data.getUsers[0];
            gs.info("****LIAM userDetails*******" + userDetails);
            if (userDetails == undefined) {
                gs.info("**********LIAM*****User doens not exist***");
                createUser = this.createUserInLIAM(contact);
            } else {
                createUser = "User Created SuccessFully!!";
                gs.info("***LIAM User exists*****update called");
            }
        } catch (ex) {
            var message = ex.message;
        }
        return createUser;
    },
    getLIAMToken: function() {
        var azureToken = this.getAzureToken();
        var LIAMToken = '';
        try {
            var r = new sn_ws.RESTMessageV2('LIAMToken', 'GetToken');
            r.setRequestHeader('Authorization', 'Basic S3VhNjhra2RzWWhzQXR4dFhnT3h4UlFJR0F6VnFTQ1Q6c2Vad3JCNzY1Z1hRdzB3bQ==');
            r.setRequestHeader('Content-Type', 'application/json');
            r.setQueryParameter('grant_type', 'client_credentials');
            var response = r.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus == '200' || httpStatus == '201') {
                var parseResponse = JSON.parse(responseBody);
                LIAMToken = parseResponse.access_token;
            }
        } catch (ex) {
            var message = ex.message;
        }
        return LIAMToken;
    },
    getAzureToken: function() {
        gs.info("**********LIAM getAzureToken Called********");
        var clientid = gs.getProperty('azure.platform.client_id');
        var secret = gs.getProperty('azure.platform.servicenowusage');
        var scope = 'api://' + clientid + '/.default';
        gs.info("****LIAM Scope****" + scope);
        // GET TOKEN
        var r = new sn_ws.RESTMessageV2('LumenAzure', 'getToken');
        // r.setStringParameter('clientID', clientid);
        //r.setStringParameter('secret', secret);
        //r.setStringParameter('scope', scope);
        r.setStringParameterNoEscape('scope', 'api://36b95569-7884-4d1e-9329-eb9649d46cca/.default');
        r.setStringParameterNoEscape('clientID', '36b95569-7884-4d1e-9329-eb9649d46cca');
        r.setStringParameterNoEscape('secret', 'sSe8Q~g-XYdBp8ePcD4FOX0klT92eP1.4fDOqc43');
		var response = r.execute();
        gs.info("******LIAM Azure Response****" + response);
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        gs.info("*******LIAM AZure Token REsponse**********" + httpStatus);
        var resp = JSON.parse(responseBody);
        var azureToken = resp.access_token;
        gs.info("******LIAM Azure TOKEN:" + azureToken);
        return azureToken;
    },
    createUserInLIAM: function(contact) {
        gs.info("*****LIAM createUSErCalled*******");
        var responseCreateUser = '';
        var LIAMToken = this.getLIAMToken();
        try {


            var r = new sn_ws.RESTMessageV2('LIAMToken', 'createUser');
            r.setRequestHeader('Authorization', 'Bearer ' + LIAMToken);
            r.setRequestHeader('Accept', 'application/json');
            var gr = new GlideRecord("customer_contact");
            gr.addQuery("sys_id", contact);
            gr.query();
            if (gr.next()) {
                r.setStringParameterNoEscape('company', gr.getDisplayValue('company'));
                r.setStringParameterNoEscape('displayName', gr.getDisplayValue('first_name'));
                r.setStringParameterNoEscape('userName', gr.getDisplayValue('email'));
                r.setStringParameterNoEscape('primaryPhone', gr.getDisplayValue('mobile_phone'));
                r.setStringParameterNoEscape('countryCode', "1");
                r.setStringParameterNoEscape('lastName', gr.getDisplayValue('last_name'));
                r.setStringParameterNoEscape('firstName', gr.getDisplayValue('first_name'));
                r.setStringParameterNoEscape('email', gr.getDisplayValue('email'));
            }
            var response = r.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info("*************LIAM createUser Request Body********" + r.getRequestBody());
            gs.info("********LIAM cretaeUserResponse**********" + responseBody);
            if (httpStatus == '200' || httpStatus == '201') {
                responseCreateUser = "User Created SuccessFully!!";
            } else {
                responseCreateUser = "User does not Create SuccessFully!!";
            }
        } catch (ex) {
            var message = ex.message;
        }
        return responseCreateUser;
    },
    type: 'LIAMAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>AD13956</sys_created_by>
        <sys_created_on>2022-09-14 16:56:22</sys_created_on>
        <sys_id>39518efb87f5dd10b25aa8ec0ebb3582</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>LIAMAPI</sys_name>
        <sys_package display_value="Order Management for Telecom, Media &amp; Tech" source="sn_ind_tmt_orm">3c58f5d55b0310102dff5e92dc81c711</sys_package>
        <sys_policy/>
        <sys_scope display_value="Order Management for Telecom, Media &amp; Tech">3c58f5d55b0310102dff5e92dc81c711</sys_scope>
        <sys_update_name>sys_script_include_39518efb87f5dd10b25aa8ec0ebb3582</sys_update_name>
        <sys_updated_by>AD13956</sys_updated_by>
        <sys_updated_on>2022-09-27 14:57:21</sys_updated_on>
    </sys_script_include>
</record_update>
